/* 
 * File:   AirPump.h
 * Author: Pedro Mariano
 *
 * Created on April 20, 2015
 */

#ifndef __AIR_PUMP__
#define __AIR_PUMP__

#include <enki/Interaction.h>
#include "Component.h"

namespace Enki {

	/**
	 * Represents an air pump.  An air pump is characterised by the air flow
	 * intensity and range.  An air flow sensor outside the range does not
	 * sense the air flow generated by this air pump.
	 */
	class AirPump:
		public LocalInteraction,
		public Component,
		public PhysicalObject
	{
	public:
		/**
		 * Aperture of the circle sector where the air flow is sensed.
		 */
		const double aperture;		
		/**
		 * Air flow intensity.
		 */
		double intensity;
	public:
		/**
		 * @param range Maximum distance an air sensor can be in order to sense
		 * the air flow generated by this air pump.

		 * @param owner The robot that this air pump belongs to.

		 * @param relativePosition The position of this air pump relative to robot
		 * origin.

		 * @param orientation Orientation of the air pump, relative to the robot
		 * heading.

		 * @param aperture Aperture of the circle sector where air flow is sensed.

		 * @param intensity Initial air flow intensity.  By default the air pump
		 * does not produce any air flow.
		 */
		AirPump (double range, Robot* owner, Vector relativePosition, double orientation, double aperture, double intensity = 0);
		/**
		 * Destructor.
		 */
		virtual ~AirPump ();
		/**
		 * Return the air flow at the given absolute position.

		 * <p> If the air flow intensity is minimal, or the position is outside
		 * the air pump range, or the position is outside the circle sector,
		 * vector (0,0) is returned.
		 */
		Vector getAirFlowAt (const Point &position) const;

		double getIntensity () const
		{
			return this->intensity;
		}

		double setIntensity (double v)
		{
			this->intensity = v;
		}
	};
}

#endif

// Local Variables: 
// mode: c++
// mode: flyspell-prog
// ispell-local-dictionary: "british"
// End: 
